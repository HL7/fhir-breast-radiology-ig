<?xml version="1.0" encoding="UTF-8"?>
<project name="ProcessIg">
  <property name="folder.input" value="input"/>
  <target name="onLoad.setup">
    <!-- Technically we don't need to do any of this until onGenerate, but we do it here so we can fail early.
      We can't create the info.json file until onGenerate though because until then, we don't know where the temp folder is -->
    <loadproperties srcfile="${ig.root}/ig.ini"/>
    <fail unless="version" message="'version' must be defined in ig.ini.  e.g. '2.0'"/>
    <fail unless="fhirspec" message="'fhirspec' must be defined in ig.ini. e.g. 'http://build.fhir.org/'"/>
    <fail unless="copyrightyear" message="'copyrightyear' must be defined in ig.ini. e.g. '2015+'"/>
    <fail unless="ballotstatus" message="'ballotstatus' must be defined in ig.ini.  e.g. 'CI build'"/>
  </target>
  <target name="onLoad.r5-schemas">
    <property name="schemas-r5" location="${ig.root}/input-cache/schemas-r5"/>
    <property name="r5-spec" value="http://build.fhir.org/"/>
    <mkdir dir="${schemas-r5}"/>
    <get src="${fhirspec}fhir-single.xsd" dest="${schemas-r5}" usetimestamp="true"/>
    <get src="${fhirspec}fhir-xhtml.xsd" dest="${schemas-r5}" usetimestamp="true"/>
    <get src="${fhirspec}xml.xsd" dest="${schemas-r5}" usetimestamp="true"/>
    <get src="${fhirspec}xmldsig-core-schema.xsd" dest="${schemas-r5}" usetimestamp="true"/>
  </target>
  <target name="onLoad.checkPublisher">
    <uptodate property="currentJar" targetfile="${ig.root}/input-cache/org.hl7.fhir.publisher.jar">
      <srcresources>
        <url url="https://fhir.github.io/latest-ig-publisher/org.hl7.fhir.publisher.jar"/>
      </srcresources>
    </uptodate>
  </target>
  <target name="onLoad.upgradeWarning" depends="onLoad.checkPublisher" unless="currentJar">
    <echo file="${ig.template}/onLoad-validation-checkPublisher.json" message='{"severity":"warning","code":"informational","details":{"text":"The IGPublisher used is not up-to-date.  Published content might not be properly checked and/or rendered."}}'/>
  </target>
  <target name="onLoad.findSpreadsheets">
    <!-- Look in all input folders that might contain spreadsheets and capture the list of spreadsheet XML files as a property -->
    <fileset id="spreadsheet.contents.id" dir="${ig.root}">
      <include name="${folder.input}/examples/*spreadsheet.xml"/>
      <include name="${folder.input}/extensions/*spreadsheet.xml"/>
      <include name="${folder.input}/models/*spreadsheet.xml"/>
      <include name="${folder.input}/profiles/*spreadsheet.xml"/>
      <include name="${folder.input}/resources/*spreadsheet.xml"/>
      <include name="${folder.input}/structures/*spreadsheet.xml"/>
      <include name="${folder.input}/vocabulary/*spreadsheet.xml"/>
    </fileset>
    <property name="prop.spreadsheet.contents" refid="spreadsheet.contents.id"/>
  </target>
  <target name="onLoad.updateIg" depends="onLoad.findSpreadsheets">
    <!-- Supplement the IG file with various standard configuration files, as well as with a list of any found spreadsheets (if they're not already enumerated) -->
    <xslt in="${onLoad.ig.source}xml" out="${onLoad.ig.dest}xml" style="${ig.scripts}/onLoad.xslt">
      <param name="spreadsheetList" expression="${prop.spreadsheet.contents}"/>
    </xslt>
  </target>
  <target name="onLoad" depends="onLoad.setup,onLoad.r5-schemas,onLoad.upgradeWarning,onLoad.updateIg">
    <concat destfile="${ig.template}/onLoad-validation.json" encoding="UTF-8" outputencoding="UTF-8">
      <header>{"resourceType":"OperationOutcome","issue":[</header>
      <footer>]}</footer>
      <fileset dir="${ig.template}" includes="onLoad-validation*.json"/>
    </concat>
  </target>
  <target name="onGenerate.setup">
    <property name="dir.input" value="${ig.root}/${folder.input}"/>
    <property name="dir.temp.includes" value="${ig.temp}/_includes" relative="yes"/>
    <property name="dir.template.includes" value="${ig.template}/includes" relative="yes"/>
    <loadfile property="groupings" srcFile="${ig.scripts}/groupings.txt" encoding="UTF-8"/>
  </target>
  <target name="onGenerate.infoFile" depends="onGenerate.setup">
    <echo file="${ig.temp}/_data/info.json">{
  "ballotstatus":"${ballotstatus}",
  "copyrightyear":"${copyrightyear}",
  "excludexml":"${excludexml}",
  "excludejson":"${excludejson}",
  "excludettl":"${excludettl}",
  "excludemaps":"${excludemaps}"
}</echo>
  </target>
  <target name="onGenerate.processIg">
    <xslt in="${onGenerate.ig.source}xml" out="${onGenerate.ig.source}1.xml" style="${ig.scripts}/onGenerate.group.xslt"/>
    <replace file="${onGenerate.ig.source}1.xml" token="&lt;!--TEMPLATE_GROUPS_HERE--&gt;" value="${groupings}"/>
    <xslt in="${onGenerate.ig.source}1.xml" out="${onGenerate.ig.dest}xml" style="${ig.scripts}/onGenerate.final.xslt"/>
  </target>
  <target name="onGenerate.processIncludes" depends="onGenerate.setup">
    <copy todir="${dir.temp.includes}">
      <fileset dir="${dir.template.includes}" includes="*"/>
    </copy>
    <xslt basedir="${dir.input}/includes" includes="*.xml" destdir="${dir.temp.includes}" extension=".xml" style="${ig.scripts}/processPages.xslt"/>
    <xslt basedir="${dir.input}/pagecontent" includes="*.xml" destdir="${dir.temp.includes}" extension=".xml" style="${ig.scripts}/processPages.xslt"/>
  </target>
  <target name="onGenerate.artifactList" depends="onGenerate.processIg,onGenerate.setup">
    <xslt in="${onGenerate.ig.dest}xml" out="${dir.temp.includes}/artifacts.xml" style="${ig.scripts}/createArtifactSummary.xslt"/>
  </target>
  <target name="onGenerate" depends="onGenerate.infoFile,onGenerate.processIncludes,onGenerate.artifactList">
    <fileset id="onGenerate.files.id" dir="${ig.root}">
      <include name="${dir.temp.includes}/artifacts.xml"/>
    </fileset>
    <property name="onGenerate.files" refid="onGenerate.files.id"/>
    <concat destfile="${ig.template}/onGenerate-validation.json" encoding="UTF-8" outputencoding="UTF-8">
      <header>{"resourceType":"OperationOutcome","issue":[</header>
      <footer>]}</footer>
      <fileset dir="${ig.template}" includes="ongenerate-validation*.json"/>
    </concat>
  </target>
</project>